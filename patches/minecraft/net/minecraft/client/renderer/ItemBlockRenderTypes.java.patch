--- a/net/minecraft/client/renderer/ItemBlockRenderTypes.java
+++ b/net/minecraft/client/renderer/ItemBlockRenderTypes.java
@@ -19,6 +_,7 @@
 
 @OnlyIn(Dist.CLIENT)
 public class ItemBlockRenderTypes {
+   @Deprecated
    private static final Map<Block, RenderType> f_109275_ = Util.m_137469_(Maps.newHashMap(), (p_109296_) -> {
       RenderType rendertype = RenderType.m_110503_();
       p_109296_.put(Blocks.f_50267_, rendertype);
@@ -286,6 +_,7 @@
       p_109296_.put(Blocks.f_50628_, rendertype3);
       p_109296_.put(Blocks.f_152498_, rendertype3);
    });
+   @Deprecated
    private static final Map<Fluid, RenderType> f_109276_ = Util.m_137469_(Maps.newHashMap(), (p_109290_) -> {
       RenderType rendertype = RenderType.m_110466_();
       p_109290_.put(Fluids.f_76192_, rendertype);
@@ -293,6 +_,7 @@
    });
    private static boolean f_109277_;
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109282_(BlockState p_109283_) {
       Block block = p_109283_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -303,6 +_,7 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109293_(BlockState p_109294_) {
       Block block = p_109294_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -318,8 +_,7 @@
    }
 
    public static RenderType m_109284_(BlockState p_109285_, boolean p_109286_) {
-      RenderType rendertype = m_109282_(p_109285_);
-      if (rendertype == RenderType.m_110466_()) {
+      if (canRenderInLayer(p_109285_, RenderType.m_110466_())) {
          if (!Minecraft.m_91085_()) {
             return Sheets.m_110792_();
          } else {
@@ -340,12 +_,87 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109287_(FluidState p_109288_) {
       RenderType rendertype = f_109276_.get(p_109288_.m_76152_());
       return rendertype != null ? rendertype : RenderType.m_110451_();
    }
 
+   // FORGE START
+
+   private static final java.util.function.Predicate<RenderType> SOLID_PREDICATE = type -> type == RenderType.m_110451_();
+   private static final RenderChecks<Block> BLOCK_RENDER_CHECKS = new RenderChecks<>(f_109275_);
+   private static final RenderChecks<Fluid> FLUID_RENDER_CHECKS = new RenderChecks<>(f_109276_);
+
+   public static boolean canRenderInLayer(BlockState state, RenderType type) {
+      Block block = state.m_60734_();
+      if (block instanceof LeavesBlock) {
+         return f_109277_ ? type == RenderType.m_110457_() : type == RenderType.m_110451_();
+      } else {
+         return BLOCK_RENDER_CHECKS.test(block, type);
+      }
+   }
+
+   public static boolean canRenderInLayer(FluidState fluid, RenderType type) {
+      return FLUID_RENDER_CHECKS.test(fluid.m_76152_(), type);
+   }
+
+   public static void setRenderLayer(Block block, RenderType type) {
+      BLOCK_RENDER_CHECKS.set(block, type);
+   }
+
+   public static void setRenderLayer(Block block, java.util.function.Predicate<RenderType> predicate) {
+      BLOCK_RENDER_CHECKS.set(block, predicate);
+   }
+
+   public static void setRenderLayer(Fluid fluid, RenderType type) {
+      FLUID_RENDER_CHECKS.set(fluid, type);
+   }
+
+   public static void setRenderLayer(Fluid fluid, java.util.function.Predicate<RenderType> predicate) {
+      FLUID_RENDER_CHECKS.set(fluid, predicate);
+   }
+
    public static void m_109291_(boolean p_109292_) {
       f_109277_ = p_109292_;
+   }
+
+   private static class RenderChecks<T extends net.minecraftforge.registries.ForgeRegistryEntry<T>> {
+      private final Map<net.minecraftforge.registries.IRegistryDelegate<T>, java.util.function.Predicate<RenderType>> checks = Maps.newHashMap();
+      @javax.annotation.Nullable
+      private volatile java.util.function.BiPredicate<T, RenderType> testFunction;
+
+      public RenderChecks(Map<T, RenderType> vanillaTypes) {
+         vanillaTypes.forEach((entry, type) -> this.checks.put(entry.delegate, matchesType(type)));
+      }
+
+      public void set(T entry, RenderType type) {
+         this.set(entry, matchesType(type));
+      }
+
+      public synchronized void set(T entry, java.util.function.Predicate<RenderType> predicate) {
+         this.checks.put(entry.delegate, predicate);
+         this.testFunction = null;
+      }
+
+      public boolean test(T entry, RenderType type) {
+         var testFunction = this.testFunction;
+         if (testFunction == null) {
+            synchronized (this) {
+               this.testFunction = testFunction = this.buildTestFunction();
+            }
+         }
+         return testFunction.test(entry, type);
+      }
+
+      private java.util.function.BiPredicate<T, RenderType> buildTestFunction() {
+         var lookup = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(this.checks, 0.5F);
+         lookup.defaultReturnValue(SOLID_PREDICATE);
+         return (entry, type) -> lookup.get(entry.delegate).test(type);
+      }
+
+      private static java.util.function.Predicate<RenderType> matchesType(RenderType type) {
+         return java.util.Objects.requireNonNull(type)::equals;
+      }
    }
 }
